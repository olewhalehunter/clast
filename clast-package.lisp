;;;; -*- Mode: Lisp -*-

;;;; clast-package.lisp --

;;;; See file COPYING in main folder for licensing and copyright information.

(defpackage "IT.UNIMIB.DISCO.MA.CL.UTIL.CLAST" (:use "CL")
  (:nicknames "CLAST" "CL.UTIL.CLAST")
  (:documentation "The CLAST package.

The top-level package API for the CLAST (CL Abstract Syntax Tree)
Library.

Notes:

The name is apt as its etymology goes back to 'clastic' rocks, made of
smaller and broken rocks.")

  (:shadow
   ;; The Magnificent (yet neglected) 7 (+ 2).

   "VARIABLE-INFORMATION"
   "FUNCTION-INFORMATION"
   "DECLARATION-INFORMATION"
   "AUGMENT-ENVIRONMENT"
   "DEFINE-DECLARATION"
   "PARSE-MACRO"
   "ENCLOSE"

   "BLOCK-INFORMATION"
   "TAG-INFORMATION"
   )


  (:export
   ;; The Magnificent (yet neglected) 7 (+ 2).

   "VARIABLE-INFORMATION"
   "FUNCTION-INFORMATION"
   "DECLARATION-INFORMATION"
   "AUGMENT-ENVIRONMENT"
   "DEFINE-DECLARATION"
   "PARSE-MACRO"
   "ENCLOSE"

   "BLOCK-INFORMATION"
   "TAG-INFORMATION"
   )


  (:export
   ;; Environments.

   "ENSURE-PARSING-ENVIRONMENT"

   "IS-ENVIRONMENT"
   "ENVIRONMENTP"
   )
  

  (:export
   "PARSE"
   "PARSE-FORM"
   "OPERATOR"
   "ARGUMENTS"
   "PARSE-DECLARATION"

   "PARSE-STRUCT-OPTION"
   "PARSE-LOOP-CLAUSE"
   )

  (:export
   "MAP-SUBFORMS"
   "WALK"

   "VARIABLES"
   "BOUND-VARIABLES"
   "SPECIAL-VARIABLES"
   "FREE-VARIABLES"
   "FUNCTIONS"
   "MACROS"
   "SYMBOL-MACROS"
   )

  (:export
   "FORM"
   "CONSTANT-FORM"
   "BINDING-FORM"
   "VBINDING-FORM"
   "FBINDING-FORM"

   "IMPLICIT-PROGN"

   "SYMBOL-REF"
   "VARIABLE-REF"
   "CONSTANT-REF"
   "FREE-VARIABLE-REF"
   "SPECIAL-VARIABLE-REF"
   "SYMBOL-MACRO-REF"
   "FUNCTION-NAME-REF"
   "MACRO-NAME-REF"
   "BLOCK-NAME-REF"
   "GO-TAG"

   "APPLICATION"
   "FUNCTION-APPLICATION"
   "LAMBDA-APPLICATION"
   "FUNCTIONAL-OPERATOR-APPLICATION"
   "MACRO-APPLICATION"
   "LOCAL-FUNCTION-APPLICATION"
   "LOCAL-MACRO-APPLICATION"

   "DECLARATION-FORM"
   "DECLARATION-SPECIFIER-FORM"

   "TYPE-DECLARATION-SPECIFIER-FORM"
   "FTYPE-DECLARATION-SPECIFIER-FORM"
   "ID-DECLARATION-SPECIFIER-FORM"

   "BLOCK-FORM"
   "CATCH-FORM"
   "THROW-FORM"
   "EVAL-WHEN-FORM"

   "FLET-FORM"
   "LABELS-FORM"
   "MACROLET-FORM"
   "SYMBOL-MACROLET-FORM"
   "LET-FORM"
   "LET*-FORM"

   "FUNCTION-FORM"
   "LAMBDA-FORM"

   "GO-FORM"
   "IF-FORM"
   ;; ...
   "COND-FORM"
   "CASE-FORM"
   "CCASE-FORM"
   "ECASE-FORM"
   "TYPECASE-FORM"
   "ETYPECASE-FORM"
   
   "MVB-FORM"
   "MULTIPLE-VALUE-CALL-FORM"
   "MULTIPLE-VALUE-PROG1-FORM"
   
   "LOAD-TIME-VALUE-FORM"
   "LOCALLY-FORM"
   
   "QUOTE-FORM"
   "RETURN-FROM-FORM"
   "THE-FORM"
   
   "PROGN-FORM"
   "PROGV-FORM"
   "PROGN-FORM"

   "ASSIGNMENT-FORM"
   "SET-FORM"
   "SETQ-FORM"
   "SETF-FORM"

   "TAGBODY-FORM"
   "PROG-FORM"
   "PROG*-FORM"

   "UNWIND-PROTECT-FORM"
   "ERROR-CLAUSE-FORM"
   "CONDITION-CASE-FORM"
   "HANDLER-CASE-FORM"
   "RESTART-CASE-FORM"
   "HANDLER-BIND-FORM"
   "RESTART-BIND-FORM"

   "FUNCTION-DEFINITION-FORM"
   "MACRO-DEFINITION-FORM"

   "DEFINITION-FORM"
   "DEFINITION-LAMBDA-LIST-FORM"

   "DEF-SYMBOL-REF-FORM"
   "DEFVAR-FORM"
   "DEFPARAMETER-FORM"
   "DEFCONSTANT-FORM"

   "DEFUN-FORM"
   "DEFGENERIC-FORM"
   "DEFMETHOD-FORM"

   "DEFINE-COMPILER-MACRO-FORM"
   "DEFINE-MODIFIER-MACRO-FORM"
   
   "DEFSTRUCT-FORM"
   "DEFCLASS-FORM"

   "DEFINE-METHOD-COMBINATION-FORM"
   "DEFINE-SYMBOL-MACRO-FORM"
   "DEFINE-SETF-EXPANDER-FORM"
   "DEFSETF-FORM"
   
   "DEFPCKAGE-FORM"

   "ITERATION-FORM"
   "DOVAR-FORM"

   "DOLIST-FORM"
   "DOTIMES-FORM"

   "DO-LOOP-FORM"
   "DO-FORM"
   "DO*-FORM"

   "SIMPLE-LOOP-FORM"
   "LOOP-FORM"

   "LOOP-CLAUSE"
   "LOOP-SUBCLAUSE"
   "LOOP-VAR-SUBCLAUSE"
   )

  (:export "CLAST-ELEMENT-SUBFORMS")

  )

;;;; end of file -- clast-package.lisp --
